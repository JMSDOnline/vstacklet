#!/bin/bash
################################################################################
# <START METADATA>
# @file_name: vs-backup
# @version: 3.1.1164
# @description: This script will allow you to backup your vStacklet server
# files and databases.
#
# @project_name: vstacklet
#
# @path: bin/backup/vs-backup
#
# @brief: vs-backup can be used on any server to backup files, directories and mysql
# databases, but it is designed to work with the vStacklet server stack.
# This script will backup your database and files.
# Please ensure you have read the documentation before continuing.
#
# - [vStacklet Documentation](https://github.com/JMSDOnline/vstacklet/blob/main/docs/setup/vstacklet.sh.md)
# - [vStacklet Server Stack Documentation](https://github.com/JMSDOnline/vstacklet/blob/main/docs/setup/vstacklet-server-stack.sh.md)
#
# This script will do the following:
# - Backup your database.
# - Backup your files.
# - Compress the backup files. (default: tar.gz - for files and sql.gz - for database)
# - Automatically encrypt the backup files. (password: set to your database password by default - `-dbpass`)
# - Retain the backup files based on the retention options. (default: 7 days)
#
# #### options:
# | Short | Long                       | Description
# | ----- | -------------------------- | ------------------------------------------
# |  -db   | --database                 | Backup the database.
# |  -dbuser   | --database_user          | The database user. (default: `root`)
# |  -dbpass   | --database_password      | The database password. (default: pulled from `/root/.my.cnf`)
# |  -dbdbu   | --database_backup_directory   | The database destination backup directory. (default: `/backup/databases`)
# |  -dbtbu   | --database_temporary_directory  | The database temporary backup directory. (default: `/tmp/vstacklet/backup/databases`)
# |  -dbenc   | --database_encryption     | Encrypt the database backup. (default: `false`)
# |  -f   | --files                    | Backup files in the web root directory.
# |  -fdbu   | --file_backup_directory   | The files destination backup directory. (default: `/backup/files`)
# |  -ftbu   | --file_temporary_directory  | The files temporary backup directory. (default: `/tmp/vstacklet/backup/files`)
# |  -r   | --retention                | Retention options. (default: `7`)
# |  -frpe   | --file_retention_path_extension  | Retention path extension for the files. (default: `tar.gz`)
# |  -dbrpe   | --database_retention_path_extension  | Retention path extension for the database. (default: `enc`)
# |  -h   | --help                     | Display the help menu.
# |  -V   | --version                  | Display the version.
#
# #### examples:
# ```bash
#  /opt/vstacklet/bin/backup/vs-backup -db "database" -f "/var/www/html"
# ```
#
# @save_tasks:
#  automated_versioning: true
#  automated_documentation: true
#
# @build_tasks:
#  automated_comment_strip: false
#  automated_encryption: false
#
# @author: Jason Matthews (JMSolo)
# @author_contact: https://github.com/JMSDOnline/vstacklet
#
# @license: MIT License (Included in LICENSE)
# Copyright (C) 2016-2023, Jason Matthews
# All rights reserved.
# <END METADATA>
################################################################################
# @name: vstacklet::environment::functions (2)
# @description: Stage various functions for the setup environment. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L71-L150)
# @break
##################################################################################
vstacklet::environment::functions() {
	vstacklet::shell::output() {
		declare shell_reset
		shell_reset=$(tput sgr0)
		if [[ -z ${shell_newline} ]]; then
			declare shell_newline="\n"
		else
			unset shell_newline
		fi
		if [[ -n ${shell_icon} && -n "$*" ]]; then
			declare shell_newline="\n"
		elif [[ -n ${shell_icon} && -z "$*" ]]; then
			unset shell_newline
		fi
		case "${shell_option}" in
		bold) shell_option=$(tput bold) ;;
		underline) shell_option=$(tput smul) ;;
		standout) shell_option=$(tput smso) ;;
		esac
		case "${shell_icon}" in
		arrow) shell_icon="➜ ${shell_reset}" ;;
		warning) shell_icon="⚠ warning: ${shell_reset}" && shell_warning="1" ;;
		check) shell_icon="✓ ${shell_reset}" ;;
		cross) shell_icon="✗ ${shell_reset}" ;;
		success) shell_icon="✓ success: ${shell_reset}" && shell_success="1" ;;
		error) shell_icon="✗ error: ${shell_reset}" && shell_error="1" ;;
		rollback) shell_icon="⎌ rollback: ${shell_reset}" && shell_rollback="1" ;;
		esac
		if [[ ${shell_success} == "1" ]]; then
			printf -- "${shell_reset}$(tput bold)${shell_color}${shell_icon}${shell_reset} ${output_color}%s${shell_newline}${shell_reset}" "$@"
		elif [[ ${shell_warning} == "1" ]]; then
			printf -- "${shell_reset}$(tput bold)${shell_color}${shell_icon}${shell_reset} ${output_color}%s${shell_newline}${shell_reset}" "$@"
		elif [[ ${shell_error} == "1" ]]; then
			printf -- "${shell_reset}$(tput bold)${shell_color}${shell_icon}${shell_reset} ${output_color}%s${shell_newline}${shell_reset}" "$@"
		elif [[ ${shell_rollback} == "1" ]]; then
			printf -- "${shell_reset}$(tput bold)${shell_color}${shell_icon}${shell_reset} ${output_color}%s${shell_newline}${shell_reset}" "$@"
		else
			printf -- "${shell_reset}${shell_color}${shell_icon}${shell_option}%s${shell_newline}${shell_reset}" "$@"
		fi
		unset shell_color shell_newline shell_option shell_icon
	}
	vstacklet::shell::misc::nl() {
		printf "\n"
	}
	vstacklet::shell::text::white() {
		declare -g shell_color
		shell_color=$(tput setaf 7)
		vstacklet::shell::output "$@"
	}
	vstacklet::shell::text::white::sl() {
		declare -g shell_color shell_newline=0
		shell_color=$(tput setaf 7)
		vstacklet::shell::output "$@"
	}
	vstacklet::shell::text::error() {
		declare -g shell_color shell_icon
		shell_color=$(tput setaf 1)
		shell_icon="error"
		output_color=$(tput setaf 7)
		vstacklet::shell::output "$@"
	}
	vstacklet::shell::text::success() {
		declare -g shell_color shell_icon
		shell_color=$(tput setaf 2)
		shell_icon="success"
		output_color=$(tput setaf 7)
		vstacklet::shell::output "$@"
	}
	vstacklet::shell::text::green() {
		declare -g shell_color
		shell_color=$(tput setaf 2)
		vstacklet::shell::output "$@"
	}
	vstacklet::shell::text::continue() {
		declare -g shell_color shell_icon
		shell_color=$(tput setaf 5)
		shell_icon="arrow"
		vstacklet::shell::output "$@"
	}
}

##################################################################################
# @name: vstacklet::environment::checkroot (1)
# @description: Check if the user is root. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L157-L162)
# @break
##################################################################################
vstacklet::environment::checkroot() {
	[[ $(whoami) != "root" ]] && {
		vstacklet::shell::text::error "you must be root to run this script."
		exit 1
	}
}

##################################################################################
# @name: vstacklet::backup::updater (3)
# @description: Update the backup script. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L169-L185)
# @break
##################################################################################
vstacklet::backup::updater() {
	# @script-note: check if the version is greater than the current version
	current_version=$(grep -Eo "[0-9]+\.[0-9]+\.[0-9]+" /usr/local/bin/vs-backup)
	upstream_version=$(curl -s "https://raw.githubusercontent.com/JMSDOnline/vstacklet/main/bin/backup/vs-backup" | grep -Eo "[0-9]+\.[0-9]+\.[0-9]+")
	[[ "${current_version}" == "${upstream_version}" ]] && vstacklet::shell::text::success "The backup script is up to date. Proceeding..." && vstacklet::shell::misc::nl
	if [[ "${current_version}" != "${upstream_version}" ]]; then
		vstacklet::shell::text::white "Updating the backup script..."
		# @script-note: download the latest version of vs-backup
		curl -s "https://raw.githubusercontent.com/JMSDOnline/vstacklet/main/bin/backup/vs-backup" >/usr/local/bin/vs-backup
		# @script-note: copy the backup script to the /opt/vstacklet/bin/backup directory
		cp -f /usr/local/bin/vs-backup /opt/vstacklet/bin/backup/vs-backup
		# @script-note: convert vs-backup shell scripts to executable
		chmod +x /usr/local/bin/vs-backup /opt/vstacklet/bin/backup/vs-backup
		vstacklet::shell::text::success "The backup script has been updated successfully. Proceeding..."
		vstacklet::shell::misc::nl
	fi
}

##################################################################################
# @name: vstacklet::backup::variables (4)
# @description: Set the variables for the backup. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L192-L326)
# @break
##################################################################################
vstacklet::backup::variables() {
	help="${help:-false}"
	version="${version:-false}"
	while [ $# -gt 0 ]; do
		case "${1}" in
		-V | --version)
			version=true
			shift
			;;
		-h | --help)
			help=true
			shift
			;;
		-ec | --example_cron)
			vstacklet::backup::example_cron
			exit 0
			;;
		### FILES/DIRECTORIES OPTIONS
		-ftbu | --file_temporary_directory)
			f_tmp_dir_dest="${2}"
			shift
			shift
			;;
		-fdbu | --file_backup_directory)
			f_dir_dest="${2}"
			shift
			shift
			;;
		-f | --file)
			file="${2}"
			declare -gi backup_file_yes="1"
			shift
			shift
			;;
		### MYSQL DATABASES OPTIONS
		-dbtbu | --database_temporary_directory)
			db_tmp_dir_dest="${2}"
			shift
			shift
			;;
		-dbdbu | --database_backup_directory)
			db_dir_dest="${2}"
			shift
			shift
			;;
		-db | --database)
			db="${2}"
			declare -gi backup_db_yes="1"
			shift
			shift
			;;
		-dbenc | --database_encryption)
			db_encryption=true
			shift
			shift
			;;
		-dbuser | --database_user)
			db_user="${2}"
			shift
			shift
			;;
		-dbpass | --database_password)
			db_pass="${2}"
			shift
			shift
			;;
		-dblist | --database_list)
			db_list=("${2}")
			shift
			shift
			;;
		-dbop | --database_options)
			db_options="${2}"
			shift
			shift
			;;
		-dbdop | --database_dump_options)
			db_dump_options="${2}"
			shift
			shift
			;;
		### COMPRESSION OPTIONS
		-c | --compression)
			compression="${2}"
			shift
			shift
			;;
		-co | --compression_options)
			compression_options="${2}"
			shift
			shift
			;;
		### RETENTION OPTIONS
		-r | --retention)
			retention="${2}"
			shift
			shift
			;;
		-frp | --file_retention_path)
			file_retention_path="${2}"
			shift
			shift
			;;
		-frpe | --file_retention_path_extension)
			file_retention_path_extension="${2}"
			shift
			shift
			;;
		-dbrp | --database_retention_path)
			db_retention_path="${2}"
			shift
			shift
			;;
		-dbrpe | --database_retention_path_extension)
			db_retention_path_extension="${2}"
			shift
			shift
			;;
		*)
			vstacklet::shell::text::error "Invalid argument: ${1}"
			vstacklet::shell::misc::nl
			vstacklet::backup::usage
			exit 1
			;;
		esac
	done
	# @script-note: check if the user wants to see the version
	if [[ ${version} == "true" ]]; then
		vstacklet::backup::version
	fi
	# @script-note: check if the user wants to see the help
	if [[ ${help} == "true" ]]; then
		vstacklet::backup::usage
	fi
}

##################################################################################
# @name: vstacklet::backup::default::variables (5)
# @description: The variables used in the backup script. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L333-L382)
# @break
##################################################################################
vstacklet::backup::default::variables() {
	### DIRECTORY/FILE OPTIONS ####################################################
	# @script-note: set the source directory/file to backup
	file="${file:-/var/www/html}"
	# @script-note: grab the last entry in the file path, if last entry is / then grab the entry before the previous /.
	file_name=$(basename "${file%/}")
	# @script-note: set the temporary backup directory for the files to backup
	f_tmp_dir_dest="${f_tmp_dir_dest:-/tmp/vstacklet/backup/files/}"
	# @script-note: set the destination backup directory for the files to backup
	f_dir_dest="${f_dir_dest:-/backup/files/}"
	# @script-note: set the backup file name for the files to backup
	f_package="${f_package:-${file_name}.$(date +%Y-%m-%d-%H-%M-%S).tar.gz}"
	### MYSQL OPTIONS #############################################################
	# @script-note: set the temporary backup directory for the database to backup
	db_tmp_dir_dest="${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}"
	# @script-note: set the destination backup directory for the database to backup
	db_dir_dest="${db_dir_dest:-/backup/databases/}"
	# @script-note: set the database list
	db_list=("${db_list:-$(mysql -e "show databases;" | grep -Ev "(Database|information_schema|performance_schema|phpmyadmin|mysql|sys)")}")
	# @script-note: set the backup file name
	db_package="${db_package:-sql.$(date +%Y-%m-%d-%H-%M-%S).${compression_extension:-gz}}"
	# @script-note: set the database user
	db_user="${db_user:-root}"
	# @script-note: set the database password
	db_pass="${db_pass:-$(grep 'password' <'/root/.my.cnf' | awk -F'=' '{print $2}' | head -n 1)}"
	# @script-note: set the database options
	db_options="${db_options:---opt}"
	# @script-note: set the database dump options
	db_dump_options="${db_dump_options:---add-drop-table --lock-tables --databases}"
	### COMPRESSION OPTIONS #######################################################
	# @script-note: set the backup file compression
	compression="${compression:-gzip}"
	# @script-note: set the backup file compression options
	compression_options="${compression_options:--9}"
	# @script-note: set the compression file extension
	compression_extension="${compression_extension:-gz}"
	### RETENTION OPTIONS ########################################################
	# @script-note: set the backup file retention
	retention="${retention:-7}"
	######### DIRECTORY/FILE RETENTION OPTIONS ###################################
	# @script-note: set the backup file retention path
	file_retention_path="${file_retention_path:-${f_dir_dest}}"
	# @script-note: set the backup file retention path options for files
	file_retention_path_extension="${file_retention_path_extension:-tar.gz}"
	# @script-note: set the database backup file retention path
	######### MYSQL RETENTION OPTIONS ############################################
	db_retention_path="${db_retention_path:-${db_dir_dest}}"
	# @script-note: set the backup file retention path options for databases
	db_retention_path_extension="${db_retention_path_extension:-enc}"
}

##################################################################################
# @name: vstacklet::backup::main::checks (6)
# @description: The checks used in the backup script. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L389-L422)
# @break
##################################################################################
vstacklet::backup::main::checks() {
	### FILES/DIRECTORIES TO BACKUP
	# @script-note: check if the source file or directory exists
	[ ! -e "${file}" ] && { vstacklet::shell::text::error "The source directory or file does not exist." && exit 1; }
	### MYSQL TO BACKUP
	# @script-note: check if the database list is empty
	[[ -z "${db_list[*]}" ]] && { vstacklet::shell::text::error "The database list is empty." && exit 1; }
	# @script-note: check if either the database or the database list is empty
	[[ -z "${db}" && -z "${db_list[*]}" ]] && { vstacklet::shell::text::error "The database or the database list is empty." && exit 1; }
	# @script-note: if database is not empty, check if it exists in the database list
	[[ -n "${db}" && ! " ${db_list[*]} " =~ ${db} ]] && { vstacklet::shell::text::error "The database ${db} does not exist in the database list." && exit 1; }
	# @script-note: check if the database user is empty
	[[ -z "${db_user}" ]] && { vstacklet::shell::text::error "The database user is empty." && exit 1; }
	# @script-note: check if the database password is empty
	[[ -z "${db_pass}" ]] && { vstacklet::shell::text::error "The database password is empty." && exit 1; }
	# @script-note: check if the database options is empty
	[[ -z "${db_options}" ]] && { vstacklet::shell::text::error "The database options is empty." && exit 1; }
	# @script-note: check if the database dump options is empty
	[[ -z "${db_dump_options}" ]] && { vstacklet::shell::text::error "The database dump options is empty." && exit 1; }
	# @script-note: check if the compression is empty
	[[ -z "${compression}" ]] && { vstacklet::shell::text::error "The compression is empty." && exit 1; }
	# @script-note: check if the compression options is empty
	[[ -z "${compression_options}" ]] && { vstacklet::shell::text::error "The compression options is empty." && exit 1; }
	# @script-note: check if the retention is empty
	[[ -z "${retention}" ]] && { vstacklet::shell::text::error "The retention is empty." && exit 1; }
	# @script-note: check if the file retention path is empty
	[[ -z "${file_retention_path}" ]] && { vstacklet::shell::text::error "The retention path is empty." && exit 1; }
	# @script-note: check if the file retention path extension is empty
	[[ -z "${file_retention_path_extension}" ]] && { vstacklet::shell::text::error "The file retention path extension is empty." && exit 1; }
	# @script-note: check if the database retention path is empty
	[[ -z "${db_retention_path}" ]] && { vstacklet::shell::text::error "The retention path is empty." && exit 1; }
	# @script-note: check if the database retention path extension is empty
	[[ -z "${db_retention_path_extension}" ]] && { vstacklet::shell::text::error "The database retention path extension is empty." && exit 1; }
}

##################################################################################
# @name: vstacklet::intro (7)
# @description: Prints the intro message. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L429-L446)
# @break
##################################################################################
vstacklet::intro() {
	vstacklet::shell::text::white "Welcome to the vStacklet Backup Utility."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "This script will allow you to backup your vStacklet server."
	vstacklet::shell::text::white "Please ensure you have read the documentation before continuing."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "Documentation can be found at:"
	vstacklet::shell::text::white "https://github.com/JMSDOnline/vstacklet/blob/main/docs/bin/backup/vs-backup.md"
	vstacklet::shell::misc::nl
	vstacklet::ask::continue
}

# shall we continue? function (7.a)
vstacklet::ask::continue() {
	vstacklet::shell::text::green "Press any key to continue $(tput setaf 7)(${shell_reset}$(tput setaf 3)ctrl+C${shell_reset} $(tput setaf 7)on PC or $(tput setaf 7)${shell_reset}$(tput setaf 3)⌘+C${shell_reset} $(tput setaf 7)on Mac to ${shell_reset}$(tput setaf 1)exit${shell_reset}$(tput setaf 7)) ..."
	read -r -n 1
	vstacklet::shell::misc::nl
}

##################################################################################
# @name: vstacklet::backup::files (8)
# @description: Backup the specified files. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L453-L496)
# @break
##################################################################################
vstacklet::backup::files() {
	##################################################################################
	# @name: vstacklet::backup::files::directories (a)
	# @description: The directories for files used in the backup script.
	# note: The directories are created if they don't exist.
	##################################################################################
	if [[ ! -d "${f_tmp_dir_dest:-/tmp/vstacklet/backup/files}" ]] || [[ ! -d "${f_dir_dest:-/backup/files}" ]]; then
		vstacklet::shell::text::white "Creating backup directories for files..."
		mkdir -p "${f_tmp_dir_dest:-/tmp/vstacklet/backup/files}" 2>&1
		mkdir -p "${f_dir_dest:-/backup/files}" 2>&1
		# @script-note: check if the destination directory exists
		[ ! -d "${f_dir_dest}" ] && vstacklet::shell::text::error "Destination directory does not exist: ${f_dir_dest}" && vstacklet::shell::misc::nl && exit 1
		# @script-note: check if the temporary directory exists
		[ ! -d "${f_tmp_dir_dest}" ] && vstacklet::shell::text::error "Temporary directory does not exist: ${f_tmp_dir_dest}" && vstacklet::shell::misc::nl && exit 1
		vstacklet::shell::text::success "Backup directories created successfully."
		vstacklet::shell::misc::nl
	fi
	# @script-note: check if the backup source directory is empty
	[ -z "$(ls -A "${file}")" ] && vstacklet::shell::text::error "Backup source directory is empty: ${file}" && vstacklet::shell::misc::nl && exit 1
	# @script-note: check if the destination backup package exists
	[ -f "${f_dir_dest}${f_package}" ] && vstacklet::shell::text::error "Backup package already exists: ${f_dir_dest}${f_package}" && vstacklet::shell::misc::nl && exit 1
	# @script-note: check if the temporary backup package exists
	[ -f "${f_tmp_dir_dest}/${f_package}" ] && vstacklet::shell::text::error "Backup package already exists: ${f_tmp_dir_dest}/${f_package}" && vstacklet::shell::misc::nl && exit 1
	# @script-note: create the backup package
	vstacklet::shell::text::white "Creating backup of ${file}..."
	tar -czf "${f_tmp_dir_dest}/${f_package}" -C "${file}" .
	# @script-note: check if the temporary backup package exists
	[ ! -f "${f_tmp_dir_dest}/${f_package}" ] && vstacklet::shell::text::error "Temporary backup package does not exist: ${f_tmp_dir_dest}/${f_package}" && vstacklet::shell::misc::nl && exit 1
	# @script-note: check if the temporary backup package is empty
	[ -z "$(ls -A "${f_tmp_dir_dest}/${f_package}")" ] && vstacklet::shell::text::error "Backup package is empty: ${f_tmp_dir_dest}/${f_package}" && vstacklet::shell::misc::nl && exit 1
	# @script-note: move the backup package to the destination directory
	vstacklet::shell::text::white "Moving backup of ${file} to ${f_dir_dest}${f_package}..."
	\cp -f "${f_tmp_dir_dest}/${f_package}" "${f_dir_dest}${f_package}"
	# @script-note: check if the destination backup package exists
	[ ! -f "${f_dir_dest}${f_package}" ] && vstacklet::shell::text::error "Backup package does not exist: ${f_dir_dest}${f_package}" && vstacklet::shell::misc::nl && exit 1
	# @script-note: check if the destination backup package is empty
	[ -z "$(ls -A "${f_dir_dest}${f_package}")" ] && vstacklet::shell::text::error "Backup package is empty: ${f_dir_dest}${f_package}" && vstacklet::shell::misc::nl && exit 1
	# @script-note: check if the backup package is the correct size
	[ "$(stat -c%s "${f_dir_dest}${f_package}")" != "$(stat -c%s "${f_tmp_dir_dest}/${f_package}")" ] && vstacklet::shell::text::error "Backup package is the incorrect size: ${f_dir_dest}${f_package}" && vstacklet::shell::misc::nl && exit 1
	# @script-note: remove the backup package from the temporary directory
	rm -f "${f_tmp_dir_dest}/${f_package}"
	vstacklet::shell::text::success "The backup of ${file} was successful!"
	vstacklet::shell::misc::nl
}

################################################################################
# @name: vstacklet::backup::database (9)
# @description: Backup a database. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L516-L558)
#
# note: This function will additionally package the database backup into a tarball
# and compress it on the fly, then encrypt it. The tarball will be moved to the
# destination directory and the temporary directory will be cleaned up.
# - To decrypt the tarball, use the following command example: (replace the variables)
# ```
# openssl enc -d -pbkdf2 -in "${db_dir_dest:-/backup/databases/}${db}.sql.${date_stamp}.${compression_extension}.enc" -out "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}${db}.sql.${date_stamp}.${compression_extension}" -k "${db_pass}"
# ```
# - To extract the tarball, use the following command example: (replace the variables)
# ```
# tar -xzf "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}${db}.sql.${date_stamp}.${compression_extension}" -C "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}"
# ```
#
# @break
################################################################################
vstacklet::backup::database() {
	##################################################################################
	# @name: vstacklet::backup::db::directories (a)
	# @description: The directories for databases used in the backup script.
	# note: The directories are created if they don't exist.
	##################################################################################
	if [[ ! -d "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}" || ! -d "${db_dir_dest:-/backup/databases/}" ]]; then
		vstacklet::shell::text::white "Creating backup directories for databases..."
		[[ ! -d "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}" ]] && mkdir -p "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}"
		[[ ! -d "${db_dir_dest:-/backup/databases/}" ]] && mkdir -p "${db_dir_dest:-/backup/databases/}"
		vstacklet::shell::text::success "Backup directories created successfully."
		vstacklet::shell::misc::nl
	fi
	# @script-note: check if the database is empty
	vstacklet::shell::text::white "Backing up ${db} database to ${db_dir_dest}${db}.${db_package}..."
	# @script-note: create the backup and compress it on the fly, then encrypt it
	# shellcheck disable=SC2086
	mysqldump ${db_options} -u"${db_user}" -p"${db_pass}" ${db_dump_options} ${db} | ${compression} ${compression_options} >"${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}${db}.${db_package}"
	[[ -z "${db_encryption}" ]] && mv "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}${db}.${db_package}" "${db_dir_dest:-/backup/databases/}${db}.${db_package}"
	# @script-note: encrypt the backup if the encryption option is set
	if [[ "${db_encryption}" == "true" ]]; then
		openssl enc -pbkdf2 -salt -in "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}${db}.${db_package}" -out "${db_dir_dest:-/backup/databases/}${db}.${db_package}.enc" -k "${db_pass}"
	fi
	rm -f "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}${db}.${db_package}"
	# @script-note: check if the backup succeeded
	#if [[ "${?}" -eq 0 ]]; then # @dev-note: use the below if statement instead of this one for proper success/failure reporting
	if [[ -f "${db_dir_dest:-/backup/databases/}${db}.${db_package}.enc" || -f "${db_dir_dest:-/backup/databases/}${db}.${db_package}" ]]; then
		vstacklet::shell::text::success "The backup of ${db} was successful!"
		vstacklet::shell::misc::nl
	else
		vstacklet::shell::text::error "The backup of ${db} failed!"
		vstacklet::shell::misc::nl
	fi
	##################################################################################
	# Decrypt the backup and decompress it on the fly.
	# note: This is an example of how to decrypt and decompress the backup
	##################################################################################
	#DECOMPRESSION="tar"
	#DECOMPRESSION_OPTIONS="-xzf"
	#openssl enc -d -pbkdf2 -in "${db_dir_dest:-/backup/databases/}${db}.sql.${date_stamp}.${compression_extension:-gz}.enc" -out "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}${db}.sql.${date_stamp}.${compression_extension:-gz}" -k "${db_pass}" &&
	#	${DECOMPRESSION} ${DECOMPRESSION_OPTIONS} "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}${db}.sql.${date_stamp}.${compression_extension}" &&
	#	rm -f "${db_tmp_dir_dest:-/tmp/vstacklet/backup/databases/}${db}.sql.${date_stamp}.${compression_extension:-gz}"
}

##################################################################################
# @name: vstacklet::backup::retention (10)
# @description: The retention used in the backup script. This is used to delete
# old backups. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L578-L602)
#
# notes:
# - The retention is based on the modification time of the file.
# - Default retention is 7 days. This can be changed by setting the `-r` variable.
#   - example: `-r 14` would set the retention to 14 days.
# - The retention path options are used to exclude directories from the retention.
# - Default retention paths are /backup/files/ and /backup/databases/. These can
# be changed by setting the `-fdbu` and `-dbdbu` variables.
#   - example: `-fdbu /backup/files/backup/` would create and set the file retention
# path to /backup/files/backup/.
#
# @break
# shellcheck disable=SC2035,SC2086,SC2061
##################################################################################
vstacklet::backup::retention() {
	vstacklet::shell::text::white "Checking retention..."
	# @script-note: find files older than X days and delete them
	[[ "${backup_file_yes}" -eq 1 ]] && find "${file_retention_path:-${f_dir_dest:-/backup/files/}}" -type f -name *.${file_retention_path_extension} -mtime +${retention} -exec rm -f {} \;
	[[ "${backup_db_yes}" -eq 1 ]] && find "${db_retention_path:-${db_dir_dest:-/backup/databases/}}" -type f -name *.${db_retention_path_extension} -mtime +${retention} -exec rm -f {} \;
	# @script-note: check if the retention succeeded
	if [[ -z "$(find "${file_retention_path:-${f_dir_dest:-/backup/files/}}" -type f -name *.${file_retention_path_extension} -mtime +${retention})" ]] && [[ -z "$(find "${db_retention_path:-${db_dir_dest:-/backup/databases/}}" -type f -name *.${db_retention_path_extension} -mtime +${retention})" ]]; then
		vstacklet::shell::text::success "The retention was successful!"
		vstacklet::shell::misc::nl
		# @script-note: long listing of files in files and database backup directories to check file sizes
		if [[ "${backup_file_yes}" -eq 1 ]]; then
			vstacklet::shell::text::white "The following files remain in ${f_dir_dest}:"
			ls -lh "${f_dir_dest:-/backup/files/}"
			vstacklet::shell::misc::nl
		fi
		if [[ "${backup_db_yes}" -eq 1 ]]; then
			vstacklet::shell::text::white "The following files remain in ${db_dir_dest}:"
			ls -lh "${db_dir_dest:-/backup/databases/}"
			vstacklet::shell::misc::nl
		fi
	else
		vstacklet::shell::text::error "The retention failed!"
		vstacklet::shell::misc::nl
	fi
}

##################################################################################
# @name: vstacklet::outro (11)
# @description: Prints the outro message. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L609-L614)
# @break
##################################################################################
vstacklet::outro() {
	vstacklet::shell::text::success "backup complete!"
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "Thank you for using the vStacklet Backup Utility."
	vstacklet::shell::misc::nl
}

##################################################################################
# @name: vstacklet::backup::usage
# @description: Display the usage of the backup script. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L621-L674)
# @break
##################################################################################
vstacklet::backup::usage() {
	vstacklet::shell::text::white "Usage: ${0} [OPTION] [ARGUMENT]"
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "Backup specified directory/file and/or database to a local directory."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "Options:"
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -h, --help"
	vstacklet::shell::text::white "    Display this help message."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -V, --version"
	vstacklet::shell::text::white "    Display the version of this script."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -ec, --example_cron"
	vstacklet::shell::text::white "    Display an example cron job."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -db, --database"
	vstacklet::shell::text::white "    The database to backup."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -dbuser, --database_user"
	vstacklet::shell::text::white "    The database user to use for the backup."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -dbpass, --database_password"
	vstacklet::shell::text::white "    The database password to use for the backup."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -dbtbu, --database_temporary_directory"
	vstacklet::shell::text::white "    The temporary backup directory to use for the backup."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -dbdbu, --database_backup_directory"
	vstacklet::shell::text::white "    The destination backup directory to use for the backup."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -dbenc, --database_encryption"
	vstacklet::shell::text::white "    Encrypt the database backup. (default: false)"
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -ftbu, --file_temporary_directory"
	vstacklet::shell::text::white "    The temporary backup directory to use for the backup."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -fdbu, --file_backup_directory"
	vstacklet::shell::text::white "    The destination backup directory to use for the backup."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -f, --file"
	vstacklet::shell::text::white "    The file/directory to backup."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  -r, --retention"
	vstacklet::shell::text::white "    The retention to use for the backup."
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "Examples:"
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  vs-backup -db \"db_name\" -dbuser \"db_user\" -dbpass \"db_pass\" -f \"/var/www/html/\""
	vstacklet::shell::text::white "  vs-backup -h"
	vstacklet::shell::text::white "  vs-backup -V"
	vstacklet::shell::misc::nl
	exit 0
}

##################################################################################
# @name: vstacklet::backup::example_cron
# @description: Example cron job for the backup script. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L681-L689)
# @break
##################################################################################
vstacklet::backup::example_cron() {
	vstacklet::shell::text::white "Example Cron Job:"
	vstacklet::shell::misc::nl
	vstacklet::shell::text::white "  # Example Schedule"
	vstacklet::shell::text::white "  # Run Directory and Database Backup Daily @ 12:30 AM"
	vstacklet::shell::text::white "  30 00 * * * root /usr/local/bin/vs-backup -db \"db_name\" -dbuser \"db_user\" -dbpass \"db_pass\" -dbtbu \"/tmp/vstacklet/backup/databases/\" -dbdbu \"/backup/databases/\" -ftbu \"/tmp/vstacklet/backup/files/\" -fdbu \"/backup/files/\" -f \"/var/www/html/\""
	vstacklet::shell::misc::nl
	exit 0
}

##################################################################################
# @name: vstacklet::backup::version
# @description: Display the version of the backup script. [see function](https://github.com/JMSDOnline/vstacklet/blob/main/bin/backup/vs-backup#L696-L702)
# @break
##################################################################################
vstacklet::backup::version() {
	# @script-note: set the version of the backup script
	version="$(grep -E '^# @version:' "/opt/vstacklet/bin/backup/vs-backup" | awk '{print $3}')"
	vstacklet::shell::text::white "vStacklet Backup Utility v${version}"
	vstacklet::shell::misc::nl
	exit 0
}

################################################################################
# @description: Calls functions in required order.
# @break
################################################################################
vstacklet::environment::checkroot                             #(1)
vstacklet::environment::functions                             #(2)
vstacklet::backup::updater                                    #(3)
vstacklet::backup::variables "${@}"                           #(4)
vstacklet::backup::default::variables                         #(5)
vstacklet::backup::main::checks                               #(6)
vstacklet::intro                                              #(7)
[[ "${backup_file_yes}" -eq 1 ]] && vstacklet::backup::files  #(8)
[[ "${backup_db_yes}" -eq 1 ]] && vstacklet::backup::database #(9)
vstacklet::backup::retention                                  #(10)
vstacklet::outro                                              #(11)
